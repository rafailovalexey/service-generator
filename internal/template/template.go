package template

import (
	"bytes"
	"fmt"
	"github.com/rafailovalexey/service-generator/internal/utils"
)

func GetInterfaceTemplate(separator string, layer string, name string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package %s", utils.Lowercase(layer)))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("type %s%sInterface interface {}", utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)

	return data.Bytes()
}

func GetRealisationInterfaceTemplate(application string, separator string, kind string, layer string, name string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package %s", utils.Lowercase(name)))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tdefinition \"%s/%s/%s\"", application, kind, utils.Lowercase(layer)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("type %s%s struct {}", utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("var _ definition.%s%sInterface = (*%s%s)(nil)", utils.Capitalize(name), utils.Capitalize(layer), utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("func New%s%s() definition.%s%sInterface {", utils.Capitalize(name), utils.Capitalize(layer), utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn &%s%s{}", utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetDataTransferObjectTemplate(separator string, layer string, name string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package %s", utils.Lowercase(name)))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("type %s%s struct {}", utils.Capitalize(utils.SingularForm(name)), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("type %s%s = []%s%s", utils.Capitalize(name), utils.Capitalize(layer), utils.Capitalize(utils.SingularForm(name)), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func New%s%s() *%s%s {", utils.Capitalize(utils.SingularForm(name)), utils.Capitalize(layer), utils.Capitalize(utils.SingularForm(name)), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn &%s%s{}", utils.Capitalize(utils.SingularForm(name)), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func New%s%s(%s ...%s%s) *%s%s {", utils.Capitalize(name), utils.Capitalize(layer), utils.Lowercase(name), utils.Capitalize(utils.SingularForm(name)), utils.Capitalize(layer), utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t%s := make([]%s%s, len(%s))", utils.Lowercase(layer), utils.Capitalize(utils.SingularForm(name)), utils.Capitalize(layer), utils.Lowercase(name)))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tfor _, %s := range %s {", utils.Lowercase(utils.SingularForm(name)), utils.Lowercase(name)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t%s = append(%s, %s)", utils.Lowercase(layer), utils.Lowercase(layer), utils.Lowercase(utils.SingularForm(name))))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn &%s", utils.Lowercase(layer)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetRequestTemplate(separator string, name string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package %s", utils.Lowercase(name)))
	data.WriteString(separator)

	return data.Bytes()
}

func GetResponseTemplate(separator string, name string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package %s", utils.Lowercase(name)))
	data.WriteString(separator)

	return data.Bytes()
}

func GetProviderInterfaceTemplate(application string, separator string, kind string, layers []string, layer string, name string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package %s", utils.Lowercase(layer)))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)

	for _, l := range layers {
		switch {
		case l == "implementation":
			data.WriteString(fmt.Sprintf("\t\"%s/%s/%s/%s\"", application, kind, l, name))
			data.WriteString(separator)
		default:
			data.WriteString(fmt.Sprintf("\t\"%s/%s/%s\"", application, kind, l))
			data.WriteString(separator)
		}
	}

	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("type %s%sInterface interface {", utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)

	for _, l := range layers {
		switch {
		case l == "implementation":
			data.WriteString(fmt.Sprintf("\tGet%s%s() *%s.%sImplementation", utils.Capitalize(name), utils.Capitalize(l), name, utils.Capitalize(name)))
			data.WriteString(separator)
		default:
			data.WriteString(fmt.Sprintf("\tGet%s%s() %s.%s%sInterface", utils.Capitalize(name), utils.Capitalize(l), l, utils.Capitalize(name), utils.Capitalize(l)))
			data.WriteString(separator)
		}
	}

	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetProviderRealisationTemplate(application string, separator string, kind string, layers []string, layer string, name string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package %s", utils.Lowercase(name)))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("\tdefinition \"%s/%s/%s\"", application, kind, utils.Lowercase(layer)))
	data.WriteString(separator)

	for _, l := range layers {
		switch {
		case l == "implementation":
			data.WriteString(fmt.Sprintf("\t\"%s/%s/implementation/%s\"", application, kind, name))
			data.WriteString(separator)
		default:
			data.WriteString(fmt.Sprintf("\t\"%s/%s/%s\"", application, kind, l))
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("\t%s%s \"%s/%s/%s/%s\"", name, utils.Capitalize(l), application, kind, l, name))
			data.WriteString(separator)
		}
	}

	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("type %s%s struct {", utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)

	for _, l := range layers {
		switch {
		case l == "implementation":
			data.WriteString(fmt.Sprintf("\t%s%s *%s.%sImplementation", name, utils.Capitalize(l), name, utils.Capitalize(name)))
			data.WriteString(separator)
		default:
			data.WriteString(fmt.Sprintf("\t%s%s %s.%s%sInterface", name, utils.Capitalize(l), l, utils.Capitalize(name), utils.Capitalize(l)))
			data.WriteString(separator)
		}
	}

	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("var _ definition.%s%sInterface = (*%s%s)(nil)", utils.Capitalize(name), utils.Capitalize(layer), utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func New%s%s() definition.%s%sInterface {", utils.Capitalize(name), utils.Capitalize(layer), utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn &%s%s{}", utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	for _, l := range layers {
		switch {
		case l == "implementation":
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("func (%s *%s%s) Get%s%s() *%s.%sImplementation {", utils.FirstLetter(layer), utils.Capitalize(name), utils.Capitalize(layer), utils.Capitalize(name), utils.Capitalize(l), name, utils.Capitalize(name)))
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("\tif %s.%s%s == nil {", utils.FirstLetter(layer), name, utils.Capitalize(l)))
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("\t\t%s.%s%s = %s.New%s%s()", utils.FirstLetter(layer), name, utils.Capitalize(l), name, utils.Capitalize(name), utils.Capitalize(l)))
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("\t}"))
			data.WriteString(separator)
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("\treturn %s.%s%s", utils.FirstLetter(layer), name, utils.Capitalize(l)))
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("}"))
			data.WriteString(separator)
		default:
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("func (%s *%s%s) Get%s%s() %s.%s%sInterface {", utils.FirstLetter(layer), utils.Capitalize(name), utils.Capitalize(layer), utils.Capitalize(name), utils.Capitalize(l), l, utils.Capitalize(name), utils.Capitalize(l)))
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("\tif %s.%s%s == nil {", utils.FirstLetter(layer), name, utils.Capitalize(l)))
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("\t\t%s.%s%s = %s%s.New%s%s()", utils.FirstLetter(layer), name, utils.Capitalize(l), name, utils.Capitalize(l), utils.Capitalize(name), utils.Capitalize(l)))
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("\t}"))
			data.WriteString(separator)
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("\treturn %s.%s%s", utils.FirstLetter(layer), name, utils.Capitalize(l)))
			data.WriteString(separator)
			data.WriteString(fmt.Sprintf("}"))
			data.WriteString(separator)
		}
	}

	return data.Bytes()
}

func GetImplementationRealisationTemplate(separator string, layer string, name string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package %s", utils.Lowercase(name)))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("type %s%s struct {}", utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("func New%s%s() *%s%s {", utils.Capitalize(name), utils.Capitalize(layer), utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn &%s%s{}", utils.Capitalize(name), utils.Capitalize(layer)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("func (%s *%s%s) mustEmbedUnimplemented%sV1Server() {", utils.FirstLetter(name), utils.Capitalize(name), utils.Capitalize(layer), utils.Capitalize(name)))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetReadmeTemplate() []byte {
	data := bytes.Buffer{}

	return data.Bytes()
}

func GetGitIgnoreTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("# JetBrains"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf(".idea"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("# Build"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("build"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("# Environment"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf(".env"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("# Mocks"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("*_mock.go"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetExampleEnvironmentTemplate(separator string) []byte {
	data := bytes.Buffer{}

	return data.Bytes()
}

func GetGrpcMicroserviceMakefileTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("# Variables"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("PROTO_SOURCE_DIRECTORY = api"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("PROTO_OUTPUT_DIRECTORY = pkg"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("PROTO_FILES = \\"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("MOCKS_OUTPUT_DIRECTORY = mocks"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("MOCKS_FILES = \\"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("# GRPC"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("grpc-generate:"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tbin/grpc-generate.sh $(PROTO_SOURCE_DIRECTORY) $(PROTO_OUTPUT_DIRECTORY) $(PROTO_FILES)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("# Mocks"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("mocks-generate:"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tbin/mocks-generate.sh $(MOCKS_OUTPUT_DIRECTORY) $(MOCKS_FILES)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("# Generate"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("generate:"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tmake grpc-generate"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tmake mocks-generate"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("# Download"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("download:"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tgo mod download"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("# Build"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("build:"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tgo build -o build/main main.go"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("# Tests"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("tests:"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tgo test -v ./..."))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(".PHONY: grpc-generate, mocks-generate, generate, download, build, tests"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetDefaultMicroserviceMakefileTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("# Variables"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("MOCKS_OUTPUT_DIRECTORY = mocks"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("MOCKS_FILES = \\"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("# Mocks"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("mocks-generate:"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tbin/mocks-generate.sh $(MOCKS_OUTPUT_DIRECTORY) $(MOCKS_FILES)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("# Generate"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("generate:"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tmake mocks-generate"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("# Download"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("download:"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tgo mod download"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("# Build"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("build:"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tgo build -o build/main main.go"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("# Tests"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("tests:"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tgo test -v ./..."))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(".PHONY: mocks-generate, generate, download, build, tests"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetDockerIgnoreTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("# JetBrains"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf(".idea"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("# Build"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("build"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("# Mocks"))
	data.WriteString(separator)
	data.WriteString(separator)

	data.WriteString(fmt.Sprintf("*_mock.go"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetDockerWithPortTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("FROM golang:latest"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("WORKDIR /usr/local/application"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("COPY . ."))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN apt-get update --yes"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN apt-get upgrade --yes"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN apt-get install --yes make"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN export PATH=\"$PATH:$(go env GOPATH)/bin\""))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN make download"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN make build"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("EXPOSE 3000"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("CMD [\"./build/main\"]"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetDockerWithoutPortTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("FROM golang:latest"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("WORKDIR /usr/local/application"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("COPY . ."))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN apt-get update --yes"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN apt-get upgrade --yes"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN apt-get install --yes make"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN export PATH=\"$PATH:$(go env GOPATH)/bin\""))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN make download"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("RUN make build"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("CMD [\"./build/main\"]"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetGrpcGenerateShellScriptTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("#!/bin/bash"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("if [ \"$#\" -lt 2 ]; then"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\techo \"Usage: $0 <PROTO_SOURCE_DIRECTORY> <PROTO_OUTPUT_DIRECTORY> <PROTO_FILES>\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\texit 1"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("fi"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("PROTO_SOURCE_DIRECTORY=\"$1\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("PROTO_OUTPUT_DIRECTORY=\"$2\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("PROTO_FILES=\"${*:3}\""))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("for proto_file in $PROTO_FILES; do"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tPROTO_FILE_DIRECTORY=$(dirname \"$proto_file\")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tmkdir -p \"$PROTO_OUTPUT_DIRECTORY/$PROTO_FILE_DIRECTORY\""))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\techo \"Generating proto file for $proto_file...\""))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tprotoc \\"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t--proto_path=\"$PROTO_SOURCE_DIRECTORY\" \\"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t--go_out=\"$PROTO_OUTPUT_DIRECTORY\" \\"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t--go_opt=paths=source_relative \"$proto_file\" \\"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t--go-grpc_out=\"$PROTO_OUTPUT_DIRECTORY\" \\"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t--go-grpc_opt=paths=source_relative \"$proto_file\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("done"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetMockGenerateShellScriptTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("#!/bin/bash"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("if [ \"$#\" -lt 1 ]; then"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\techo \"Usage: $0 <MOCKS_OUTPUT_DIRECTORY> <MOCKS_FILES>\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\texit 1"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("fi"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("MOCKS_OUTPUT_DIRECTORY=\"$1\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("MOCKS_FILES=\"${*:2}\""))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("for mock_file in $MOCKS_FILES; do"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tDIRECTORY=$(dirname \"$mock_file\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tFILENAME=$(basename \"$mock_file\")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tEXTENSION=\"${FILENAME##*.}\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tFILENAME_WITHOUT_EXTENSIONS=\"${FILENAME%.*}\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tOUTPUT_PATH=\"$DIRECTORY/$MOCKS_OUTPUT_DIRECTORY/${FILENAME_WITHOUT_EXTENSIONS}_mock.$EXTENSION\""))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tmkdir -p \"$DIRECTORY/$MOCKS_OUTPUT_DIRECTORY\""))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\techo \"Generating mock file for $mock_file...\""))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tmockgen -source=\"$mock_file\" -destination=\"$OUTPUT_PATH\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("done"))
	data.WriteString(separator)

	//#!/bin/bash
	//
	//if [ "$#" -lt 1 ]; then
	//echo "Usage: $0 <MOCKS_OUTPUT_DIRECTORY> <MOCKS_FILES>"
	//exit 1
	//fi
	//
	//MOCKS_OUTPUT_DIRECTORY="$1"
	//MOCKS_FILES="${*:2}"
	//
	//for mock_file in $MOCKS_FILES; do
	//
	//DIRECTORY=$(dirname "$mock_file")
	//FILENAME=$(basename "$mock_file")
	//
	//EXTENSION="${FILENAME##*.}"
	//FILENAME_WITHOUT_EXTENSIONS="${FILENAME%.*}"
	//
	//OUTPUT_PATH="$DIRECTORY/$MOCKS_OUTPUT_DIRECTORY/${FILENAME_WITHOUT_EXTENSIONS}_mock.$EXTENSION"
	//
	//mkdir -p "$DIRECTORY/$MOCKS_OUTPUT_DIRECTORY"
	//
	//echo "Generating mock file for $mock_file..."
	//
	//mockgen -source="$mock_file" -destination="$OUTPUT_PATH"
	//
	//done

	return data.Bytes()
}

func GetGrpcLoggingInterceptorTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package interceptor"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"context\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc/codes\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc/metadata\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc/status\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"log\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func LoggingInterceptor() grpc.UnaryServerInterceptor {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn func(ctx context.Context, request interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tmd, isExist := metadata.FromIncomingContext(ctx)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif !isExist {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\treturn nil, status.Errorf(codes.Internal, \"failed to read metadata\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\ttracecode := md[\"tracecode\"][0]"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprint("\t\tlog.Printf(\"incoming grpc request: %s (%s)\", info.FullMethod, tracecode)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tresponse, err := handler(ctx, request)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif err != nil {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprint("\t\t\tlog.Printf(\"error in grpc request %s (%s) \\n %v\", info.FullMethod, tracecode, err)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif err == nil {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprint("\t\t\tlog.Printf(\"outgoing grpc response %s (%s)\", info.FullMethod, tracecode)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\treturn response, err"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetGrpcTraceCodeInterceptorTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package interceptor"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"context\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"crypto/rand\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"encoding/hex\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc/codes\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc/metadata\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc/status\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"log\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func TracecodeInterceptor() grpc.UnaryServerInterceptor {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn func(ctx context.Context, request interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tmd, isExist := metadata.FromIncomingContext(ctx)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif !isExist {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tlog.Printf(\"metadata not found in the request context\\n\")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\treturn nil, status.Errorf(codes.Internal, \"failed to read metadata\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif len(md[\"tracecode\"]) != 0 {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\treturn handler(ctx, request)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\ttracecode, err := generateTracecode()"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif err != nil {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\treturn nil, status.Errorf(codes.Internal, \"failed to generate tracecode\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tmd = metadata.Join(md, metadata.New(map[string]string{\"tracecode\": tracecode}))"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tctx = metadata.NewIncomingContext(ctx, md)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\treturn handler(ctx, request)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func generateTracecode() (string, error) {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\ttracecode := make([]byte, 16)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tif _, err := rand.Read(tracecode); err != nil {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\treturn \"\", err"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn hex.EncodeToString(tracecode), nil"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetGrpcAuthenticationMiddlewareTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package middleware"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"context\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc/codes\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc/metadata\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc/status\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"log\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"os\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func AuthenticationTokenMiddleware() grpc.UnaryServerInterceptor {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn func(ctx context.Context, request interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tmd, isExist := metadata.FromIncomingContext(ctx)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif !isExist {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\treturn nil, status.Errorf(codes.Unauthenticated, \"authentication token not found\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\theader := os.Getenv(\"AUTHENTICATION_TOKEN_HEADER\")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif header == \"\" {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tlog.Panicf(\"not found authentication token header in environment\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tlist := md[header]"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif len(list) == 0 {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\treturn nil, status.Errorf(codes.Unauthenticated, \"authentication token not found\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tkey := list[0]"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\ttoken := os.Getenv(\"AUTHENTICATION_TOKEN\")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif token == \"\" {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tlog.Panicf(\"not found authentication token in environment\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif token != key {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprint("\t\t\tlog.Printf(\"invalid authentication token: %s\", key)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\treturn nil, status.Errorf(codes.PermissionDenied, \"invalid authentication token\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\treturn handler(ctx, request)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetGrpcServerTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package grpc_server"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"fmt\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tinterceptor \"github.com/emptyhopes/employees/cmd/grpc_server/intereptor\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"github.com/emptyhopes/employees/cmd/grpc_server/middleware\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"github.com/emptyhopes/employees/pkg/employees_v1\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"google.golang.org/grpc/reflection\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"log\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"net\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"os\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func Run(api employees_v1.EmployeesV1Server) {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\thostname := os.Getenv(\"HOSTNAME\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tport := os.Getenv(\"PORT\")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tif port == \"\" {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tlog.Panicf(\"specify the port\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprint("\taddress := fmt.Sprintf(\"%s:%s\", hostname, port)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprint("\tlog.Printf(\"%s\\n\", fmt.Sprintf(\"grpc server starts at address %s\", address))"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tlistener, err := net.Listen(\"tcp\", address)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tif err != nil {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tlog.Panicf(\"grpc server startup error %v\", err)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tserver := grpc.NewServer("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tgrpc.ChainUnaryInterceptor("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tinterceptor.TracecodeInterceptor(),"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tinterceptor.LoggingInterceptor(),"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tmiddleware.AuthenticationTokenMiddleware(),"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t),"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treflection.Register(server)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\temployees_v1.RegisterEmployeesV1Server(server, api)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tlog.Printf(\"%s\\n\", fmt.Sprintf(\"grpc server is running at %s\", address))"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\terr = server.Serve(listener)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tif err != nil {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tlog.Panicf(\"grpc server startup error %v\", err)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetHttpLoggingInterceptorTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package interceptor"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"log\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"net/http\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"time\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func LoggingInterceptor(next http.Handler) http.Handler {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tstart := time.Now()"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tnext.ServeHTTP(response, request)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tduration := time.Since(start)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprint("\t\tlog.Printf(\"%s %s %s - %s %v\\n\", request.Method, request.URL.Path, request.RemoteAddr, request.UserAgent(), duration)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t})"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetHttpAuthenticationMiddlewareTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package interceptor"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"encoding/json\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"log\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"net/http\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"os\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func AuthenticationMiddleware(next http.Handler) http.Handler {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\theader := os.Getenv(\"AUTHENTICATION_TOKEN_HEADER\")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif header == \"\" {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tlog.Panicf(\"specify the name of the authentication token\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\ttoken := os.Getenv(\"AUTHENTICATION_TOKEN\")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif token == \"\" {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tlog.Panicf(\"specify the value of the authentication token\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tkey := request.Header.Get(header)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif key != token {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tresponse.Header().Set(\"Content-Type\", \"application/json\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tresponse.WriteHeader(http.StatusUnauthorized)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tresponse.Write(getErrorInJson(\"unauthorized\"))"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\treturn"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tnext.ServeHTTP(response, request)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t})"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func getErrorInJson(message string) []byte {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\ttype ErrorStruct struct {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tError string `json:\"error\"`"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\terrorStruct := &ErrorStruct{"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tError: message,"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\terrJson, err := json.Marshal(errorStruct)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tif err != nil {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\treturn []byte(err.Error())"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn errJson"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetHttpCorsMiddlewareTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package middleware"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"net/http\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func CorsMiddleware(next http.Handler) http.Handler {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn http.HandlerFunc(func(response http.ResponseWriter, request *http.Request) {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tresponse.Header().Add(\"Access-Control-Allow-Origin\", \"*\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tresponse.Header().Add(\"Access-Control-Allow-Headers\", \"*\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tresponse.Header().Add(\"Access-Control-Allow-Methods\", \"*\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tresponse.Header().Add(\"Access-Control-Allow-Credentials\", \"true\")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tif request.Method == \"OPTIONS\" {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tresponse.WriteHeader(http.StatusOK)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\treturn"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tnext.ServeHTTP(response, request)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t})"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetHttpChainMiddlewareTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package middleware"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"net/http\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func ChainMiddleware(middlewares ...func(http.Handler) http.Handler) func(http.Handler) http.Handler {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\treturn func(next http.Handler) http.Handler {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tfor index := len(middlewares) - 1; index >= 0; index-- {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t\tnext = middlewares[index](next)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\treturn next"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}

func GetHttpServerTemplate(separator string) []byte {
	data := bytes.Buffer{}

	data.WriteString(fmt.Sprintf("package http_server"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("import ("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"fmt\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"github.com/emptyhopes/employees_proxy/cmd/http_server/interceptor\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"github.com/emptyhopes/employees_proxy/cmd/http_server/middleware\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"github.com/emptyhopes/employees_proxy/internal/api\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"github.com/gorilla/mux\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"log\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"net/http\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\"os\""))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf(")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("func Run(employeeApi api.InterfaceEmployeeApi) {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\trouter := mux.NewRouter()"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tmiddlewares := middleware.ChainMiddleware("))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tinterceptor.LoggingInterceptor,"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tmiddleware.CorsMiddleware,"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tmiddleware.AuthenticationMiddleware,"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\trouter.Use(middlewares)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\trouter.NotFoundHandler = http.HandlerFunc(employeeApi.NotFound)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\trouter.MethodNotAllowedHandler = http.HandlerFunc(employeeApi.MethodNotAllowed)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\trouter.HandleFunc(\"/v1/employees/{id:[a-zA-Z0-9-]+}\", employeeApi.GetEmployeeById).Methods(\"GET\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\trouter.HandleFunc(\"/v1/employees\", employeeApi.CreateEmployee).Methods(\"POST\")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\thostname := os.Getenv(\"HOSTNAME\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tport := os.Getenv(\"PORT\")"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tif port == \"\" {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t\tlog.Panicf(\"specify the port\")"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprint("\taddress := fmt.Sprintf(\"%s:%s\", hostname, port)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprint("\tlog.Printf(\"http server starts at address %s\\n\", address)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\terr := http.ListenAndServe(address, router)"))
	data.WriteString(separator)
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\tif err != nil {"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprint("\t\tlog.Panicf(\"error when starting the grpc server %v\\n\", err)"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("\t}"))
	data.WriteString(separator)
	data.WriteString(fmt.Sprintf("}"))
	data.WriteString(separator)

	return data.Bytes()
}
